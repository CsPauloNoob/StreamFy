@page "/"
@using StreamFy.WebApp.Models
@using StreamFy.WebApp.Requests
@inject NavigationManager _navgationManager


<MudOverlay @bind-Visible="_visible" DarkBackground AutoClose="true" />

<MudContainer Class="mt-6" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5" Class="mb-4">Suas Musicas</MudText>

    <div style="display: flex; 
    overflow-x: auto; 
    gap: 16px; 
    padding-bottom: 16px;">

        @foreach (var item in _musicas)
        {
            <MudCard Style="min-width: 200px; max-width: 200px;">
                <MudCardMedia Image="@item.ImagemUrl" Height="140"/>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle2">@item.Nome</MudText>
                </MudCardContent>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle2">@item.BandaNome</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@GetFavoritoIcon(item)" 
                    Color="Color.Error" 
                    OnClick="@(() => Favoritar(item))"/>
                </MudCardActions>
            </MudCard>
        }

    </div>

</MudContainer>


<MudContainer Class="mt-6" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5" Class="mb-4">Favoritos</MudText>
    <div style="display: flex;
    overflow-x: auto;
    gap: 16px;
    padding-bottom: 16px;">
        @foreach (var item in _musicas.Where(m => m.Favorito))
        {
            <MudCard Style="min-width: 200px; max-width: 200px;">
                <MudCardMedia Image="@item.ImagemUrl" Height="140" />
                <MudCardContent>
                    <MudText Typo="Typo.subtitle2">@item.Nome</MudText>
                </MudCardContent>
                <MudCardContent>
                    <MudText Typo="Typo.subtitle2">@item.BandaNome</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@GetFavoritoIcon(item)"
                    Color="Color.Error"
                    OnClick="@(() => Favoritar(item))" />
                </MudCardActions>
            </MudCard>
        }
        @if (!_musicas.Any(m => m.Favorito))
        {
            <MudText Class="ml-2" Typo="Typo.body2">Nenhuma música favorita.</MudText>
        }
    </div>
</MudContainer>


<MudContainer Class="mt-6" MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5" Class="mb-4">Bandas</MudText>
    <div style="display: flex;
    overflow-x: auto;
    gap: 16px;
    padding-bottom: 16px;">
        @foreach (var banda in _musicas.GroupBy(m => m.BandaNome))
        {
            var primeiraMusica = banda.FirstOrDefault();
            <MudCard Style="min-width: 200px; max-width: 200px;">
                @if (primeiraMusica?.ImagemUrl is not null)
                {
                    <MudCardMedia Image="@primeiraMusica.ImagemUrl" Height="140" />
                }
                <MudCardContent>
                    <MudText Typo="Typo.subtitle2">@banda.Key</MudText>
                </MudCardContent>
            </MudCard>
        }
        @if (!_musicas.Any())
        {
            <MudText Class="ml-2" Typo="Typo.body2">Nenhuma banda encontrada.</MudText>
        }
    </div>
</MudContainer>


@code
{
    [Inject]
    private UsuarioEndpoint _usuarioEndpoint { get; set; }

    [Inject] private MusicaEndpoint _musicaEndpoint { get; set; }

    private List<MusicaReq> _musicas = new();

    private bool _visible;

    protected override async Task OnInitializedAsync()
    {
        if(!UsuarioLogado.Logado)
            _navgationManager.NavigateTo("/login");

        else
        {
            _visible = true;
            StateHasChanged();
            _musicas = await _musicaEndpoint.GetMusicas();
            _visible = false;
            StateHasChanged(); 
        }
    }

    async Task Favoritar(MusicaReq musica)
    {
        _visible = true;
        StateHasChanged();
        var result = await _musicaEndpoint.FavoritarMusica(musica);

        if(result)
            musica.Favorito = !musica.Favorito;

        _visible = false;
        StateHasChanged();
    }

    string GetFavoritoIcon(MusicaReq musica)
    {
        return musica.Favorito ? 
            Icons.Material.Filled.Favorite : 
            Icons.Material.Filled.FavoriteBorder;
    }    
}
